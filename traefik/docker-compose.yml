version: "3.9"

x-configrule: &configrule
  restart_policy:
    condition: on-failure
    max_attempts: 2
    window: 60s
  update_config:
    order: start-first
    parallelism: 1
    delay: 10s
    failure_action: rollback
    monitor: 10s
    max_failure_ratio: 1
  rollback_config:
    order: start-first
    parallelism: 1

x-placementrule: &placementrule
  mode: replicated
  replicas: 1
  placement:
    constraints:
      # Make the traefik service run only on the node with this label
      # as the node with it has the volume for the certificates
      - node.labels.traefik.traefik_certificates == true

x-resourcerule: &resourcerule
  resources:
    limits:
      cpus: "2"
      memory: "1000M"

secrets:
  cloudflare_token:
    external: true
  cloudflare_email:
    external: true

configs:
  traefik_static_config:
    file: ./traefik.yml

volumes:
  traefik_certificates:
    external: true

networks:
  public-net:
    # Declared as external to avoid error while redeploying all proxy stack
    external: true

services:
  traefik:
    image: traefik:v2.9.4
    environment:
      - TZ=Europe/Rome
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_token
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - TRAEFIK_CERTIFICATESRESOLVERS_LE_ACME_EMAIL=/run/secrets/cloudflare_email
    secrets:
      - cloudflare_token
      - cloudflare_email
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    networks:
      - public-net
    configs:
       - source: traefik_static_config
         target: /etc/traefik/traefik.yml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Bind docker socket to watch for new container
      - ./configurations:/etc/traefik/configurations # Dynamic configurations
      - traefik_certificates:/etc/traefik/cert # Let's Encrypt certificates
    deploy:
      <<: *configrule
      <<: *placementrule
      <<: *resourcerule
      labels:
        - traefik.enable=true
        - traefik.http.services.traefik.loadbalancer.server.port=8080

